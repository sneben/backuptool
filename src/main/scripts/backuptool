#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Usage:
  backuptool [options] create [<name>]
  backuptool [options] restore [<name>]
  backuptool [options] delete <name>
  backuptool [options] rotate
  backuptool [options] list

All necessary settings will be read from the config dir.

Options:
  -h --help               Show this
  -d --debug              Don't remove the working directory automatically
  -c --config CONFIG_DIR  Path to config directory. [default: /etc/backuptool/]

"""

import os
import sys
import shutil
import tempfile
import yamlreader
import subprocess

from docopt import docopt
from backuptool import (
    CallingUserError,
    DecryptionError
)
from backuptool import BashColor

from yamlreader import YamlReaderError


class ScriptExecutionError(Exception):
    pass


def perform_backup(name, config, arguments):
    """Run the given backup"""
    debug = arguments['--debug']
    upload_protocol = config['target'].split('://')[0]
    workdir = tempfile.mkdtemp(prefix='backuptool-')
    if upload_protocol == 's3':
        from backuptool.s3 import S3Backup
        my_backup = S3Backup(name, config=config, workdir=workdir)
    elif upload_protocol == 'ftp':
        from backuptool.ftp import FTPBackup
        my_backup = FTPBackup(name, config=config, workdir=workdir)
    elif upload_protocol == 'sftp':
        from backuptool.sftp import SFTPBackup
        my_backup = SFTPBackup(name, config=config, workdir=workdir)
    elif upload_protocol == 'file':
        from backuptool.file import FileBackup
        my_backup = FileBackup(name, config=config, workdir=workdir)
    else:
        message = "Target type '{0}' for backup {1} is not supported"
        message = message.format(upload_protocol, name)
        print(message)
        return
    try:
        if arguments['create']:
            run_script('pre-script',
                       workdir,
                       config.get('pre-script'))
            run_script('pre-create',
                       workdir,
                       config.get('pre-create'))
            my_backup.create()
            run_script('post-create',
                       workdir,
                       config.get('post-create'))
            run_script('post-script',
                       workdir,
                       config.get('post-script'))
        elif arguments['restore']:
            run_script('pre-script',
                       workdir,
                       config.get('pre-script'))
            run_script('pre-restore',
                       workdir,
                       config.get('pre-restore'))
            my_backup.restore()
            run_script('post-restore',
                       workdir,
                       config.get('post-restore'))
            run_script('post-script',
                       workdir,
                       config.get('post-script'))
        elif arguments['rotate']:
            my_backup.rotate()
        elif arguments['delete']:
            my_backup.delete(arguments['<name>'])
        elif arguments['list']:
            my_backup.list()
    except CallingUserError as error:
        print(error)
        sys.exit(1)
    except (ScriptExecutionError, DecryptionError) as error:
        # Just skipt to the next backup, if on is available
        print_error(name, error)
        return
    finally:
        if not debug:
            shutil.rmtree(workdir)


def run_script(identifier, workdir, script):
    """Run the given content in script as bash code

    Write the configured content into a temporary file inside the working
    directory and exexcute the result with the bash interpreter
    """
    if not script:
        return
    script_path = '{0}/{1}.sh'.format(workdir, identifier)
    with open(script_path, 'w') as f:
        # Always give a error back, else a exception could
        # not be catched during the check_output execution
        f.write('set -e\n')
        f.write(script)
    cmd = ['bash', script_path]
    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        raise ScriptExecutionError('{0} has errors:\n{1}'.format(identifier,
                                                                 e.output))
    return output


def print_error(name, message):
    """Print out a standartized error message"""
    print(
        '\n{0}[ERROR]{1}[{2}]{3} {4}'.format(BashColor.RED, BashColor.DARKCYAN,
                                             name, BashColor.END, message))


def print_line(character='â€“'):
    """Print a line of 'character' which fits the actual window size"""
    _, columns = os.popen('stty size', 'r').read().split()
    for _ in range(int(columns)):
        print(character, end='')


def read_configuration(config_dir):
    """Read the configuration an return the result as dict

    Merge all yaml files of the given directory together and return the result
    """
    try:
        return yamlreader.yaml_load(config_dir, {})
    except YamlReaderError:
        message = 'ERROR: Could not find configuration directory: {0}'
        print(message.format(config_dir))
        sys.exit(1)


def main():
    """Executed, when script is called directly"""
    arguments = docopt(__doc__)
    config_dir = arguments['--config']
    backup_config = read_configuration(config_dir)
    if arguments['list']:
        print('Available backups for this instance')
        print_line()
    for name, config in backup_config.items():
        if arguments['restore'] or arguments['create']:
            # Just process the backup with the given name
            if arguments['<name>'] and arguments['<name>'] != name:
                continue
        perform_backup(name, config, arguments)


if __name__ == '__main__':
    main()
